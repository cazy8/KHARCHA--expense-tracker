{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeechProvider = exports.SpeechContext = void 0;\nvar react_1 = __importDefault(require(\"react\"));\nvar browser_client_1 = require(\"@speechly/browser-client\");\n/**\n * A React context that holds the state of Speechly SLU API client.\n * @public\n */\nexports.SpeechContext = react_1.default.createContext({\n  connect: function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, Promise.resolve()];\n      });\n    });\n  },\n  attachMicrophone: function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, Promise.resolve()];\n      });\n    });\n  },\n  start: function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, Promise.resolve('Unknown contextId')];\n      });\n    });\n  },\n  stop: function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, Promise.resolve()];\n      });\n    });\n  },\n  clientState: browser_client_1.DecoderState.Disconnected,\n  microphoneState: browser_client_1.AudioSourceState.Stopped,\n  listening: false\n});\n/**\n * The provider for SpeechContext.\n *\n * Make sure you have only one SpeechProvider in your application,\n * because otherwise the audio will be mixed up and unusable.\n *\n * It is possible to switch the props on the fly, which will make provider stop current client if it's running\n * and start a new one.\n * @public\n */\nvar SpeechProvider = /** @class */function (_super) {\n  __extends(SpeechProvider, _super);\n  function SpeechProvider(props) {\n    var _this = _super.call(this, props) || this;\n    // init at mount mount time for to play it nice with SSR\n    _this.componentDidMount = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          this.createClient(this.props);\n          return [2 /*return*/];\n        });\n      });\n    };\n    _this.connect = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var client;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              client = this.state.client;\n              if (client == null) {\n                throw Error('No Speechly client (are you calling connect in non-browser environment)');\n              }\n              return [4 /*yield*/, client.initialize()];\n            case 1:\n              _a.sent();\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n    _this.attachMicrophone = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var client, microphone;\n        var _this = this;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              client = this.state.client;\n              if (client == null) {\n                throw Error('No Speechly client (are you calling connect in non-browser environment)');\n              }\n              microphone = new browser_client_1.BrowserMicrophone();\n              microphone.onStateChange(function (state) {\n                _this.setState({\n                  microphoneState: state\n                });\n              });\n              return [4 /*yield*/, microphone.initialize()];\n            case 1:\n              _a.sent();\n              if (!microphone.mediaStream) return [3 /*break*/, 3];\n              return [4 /*yield*/, client.attach(microphone.mediaStream)];\n            case 2:\n              _a.sent();\n              return [3 /*break*/, 4];\n            case 3:\n              throw Error('Microphone contains no MediaStream to attach');\n            case 4:\n              this.setState({\n                microphone: microphone\n              });\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n    _this.start = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, client, appId;\n        return __generator(this, function (_b) {\n          _a = this.state, client = _a.client, appId = _a.appId;\n          this.setState({\n            listening: true\n          });\n          if (client == null) {\n            throw Error('No Speechly client (are you calling start in non-browser environment)');\n          }\n          if (appId !== undefined) {\n            return [2 /*return*/, client.start({\n              appId: appId\n            })];\n          }\n          return [2 /*return*/, client.start()];\n        });\n      });\n    };\n    _this.stop = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var client;\n        return __generator(this, function (_a) {\n          client = this.state.client;\n          this.setState({\n            listening: false\n          });\n          if (client == null) {\n            throw Error('No Speechly client (are you calling stop in non-browser environment)');\n          }\n          return [2 /*return*/, client.stop()];\n        });\n      });\n    };\n    _this.createClient = function (clientOptions) {\n      var _a;\n      // Postpone connect\n      var effectiveOpts = __assign(__assign({}, clientOptions), {\n        connect: false\n      });\n      var client = new browser_client_1.BrowserClient(effectiveOpts);\n      client.onStateChange(_this.onClientStateChange);\n      client.onSegmentChange(_this.onSegmentChange);\n      client.onTranscript(_this.onTranscript);\n      client.onEntity(_this.onEntity);\n      client.onIntent(_this.onIntent);\n      if (!((_a = clientOptions.disableTentative) !== null && _a !== void 0 ? _a : false)) {\n        client.onTentativeIntent(_this.onTentativeIntent);\n        client.onTentativeTranscript(_this.onTentativeTranscript);\n        client.onTentativeEntities(_this.onTentativeEntities);\n      }\n      // Connect now to pre-warm backend if not explicitely told not to\n      if (clientOptions.connect !== false) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        client.initialize();\n      }\n      _this.setState({\n        client: client\n      });\n    };\n    _this.onClientStateChange = function (clientState) {\n      if (clientState <= browser_client_1.DecoderState.Disconnected) {\n        _this.setState({\n          listening: false\n        });\n      }\n      _this.setState({\n        clientState: clientState\n      });\n    };\n    _this.onSegmentChange = function (segment) {\n      if (!segment.isFinal) {\n        _this.setState({\n          segment: segment\n        });\n        return;\n      }\n      // Reset individual values when a segment is finalised.\n      _this.setState({\n        segment: segment,\n        tentativeTranscript: undefined,\n        transcript: undefined,\n        tentativeEntities: undefined,\n        entity: undefined,\n        tentativeIntent: undefined,\n        intent: undefined\n      });\n    };\n    _this.onTentativeTranscript = function (contextId, segmentId, words, text) {\n      _this.setState({\n        tentativeTranscript: {\n          contextId: contextId,\n          segmentId: segmentId,\n          text: text,\n          words: words\n        }\n      });\n    };\n    _this.onTranscript = function (contextId, segmentId, word) {\n      _this.setState({\n        transcript: {\n          contextId: contextId,\n          segmentId: segmentId,\n          word: word\n        }\n      });\n    };\n    _this.onTentativeEntities = function (contextId, segmentId, entities) {\n      _this.setState({\n        tentativeEntities: {\n          contextId: contextId,\n          segmentId: segmentId,\n          entities: entities\n        }\n      });\n    };\n    _this.onEntity = function (contextId, segmentId, entity) {\n      _this.setState({\n        entity: {\n          contextId: contextId,\n          segmentId: segmentId,\n          entity: entity\n        }\n      });\n    };\n    _this.onTentativeIntent = function (contextId, segmentId, intent) {\n      _this.setState({\n        tentativeIntent: {\n          contextId: contextId,\n          segmentId: segmentId,\n          intent: intent\n        }\n      });\n    };\n    _this.onIntent = function (contextId, segmentId, intent) {\n      _this.setState({\n        intent: {\n          contextId: contextId,\n          segmentId: segmentId,\n          intent: intent\n        }\n      });\n    };\n    _this.state = {\n      client: undefined,\n      microphone: undefined,\n      listening: false,\n      clientState: browser_client_1.DecoderState.Disconnected,\n      microphoneState: browser_client_1.AudioSourceState.Stopped,\n      appId: props.appId\n    };\n    return _this;\n  }\n  SpeechProvider.prototype.render = function () {\n    return react_1.default.createElement(exports.SpeechContext.Provider, {\n      value: {\n        connect: this.connect,\n        attachMicrophone: this.attachMicrophone,\n        start: this.start,\n        stop: this.stop,\n        appId: this.state.appId,\n        listening: this.state.listening,\n        clientState: this.state.clientState,\n        microphoneState: this.state.microphoneState,\n        segment: this.state.segment,\n        tentativeTranscript: this.state.tentativeTranscript,\n        transcript: this.state.transcript,\n        tentativeEntities: this.state.tentativeEntities,\n        entity: this.state.entity,\n        tentativeIntent: this.state.tentativeIntent,\n        intent: this.state.intent,\n        client: this.state.client\n      }\n    }, this.props.children);\n  };\n  SpeechProvider.prototype.componentDidUpdate = function (prevProps) {\n    return __awaiter(this, void 0, void 0, function () {\n      var props, _a, client, microphone, e_1, e_2;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            props = this.props;\n            // We cannot compare microphone / api client / storage implementations,\n            // so changes in those will be ignored.\n            // A better approach for those would be to use separate contexts.\n            if (props.appId === prevProps.appId && props.sampleRate === prevProps.sampleRate && props.debug === prevProps.debug && props.apiUrl === prevProps.apiUrl) {\n              return [2 /*return*/];\n            }\n            _a = this.state, client = _a.client, microphone = _a.microphone;\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, client === null || client === void 0 ? void 0 : client.close()];\n          case 2:\n            _b.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_1 = _b.sent();\n            console.error('Error closing Speechly client:', e_1);\n            return [3 /*break*/, 4];\n          case 4:\n            _b.trys.push([4, 6,, 7]);\n            return [4 /*yield*/, microphone === null || microphone === void 0 ? void 0 : microphone.close()];\n          case 5:\n            _b.sent();\n            return [3 /*break*/, 7];\n          case 6:\n            e_2 = _b.sent();\n            console.error('Error closing microphone:', e_2);\n            return [3 /*break*/, 7];\n          case 7:\n            this.createClient(props);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  SpeechProvider.prototype.componentWillUnmount = function () {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, (_a = this.state.client) === null || _a === void 0 ? void 0 : _a.close()];\n          case 1:\n            _c.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            _b = _c.sent();\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return SpeechProvider;\n}(react_1.default.Component);\nexports.SpeechProvider = SpeechProvider;","map":{"version":3,"mappings":"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","names":["exports","react_1","createContext","connect","resolve","attachMicrophone","start","stop","clientState","browser_client_1","Disconnected","microphoneState","Stopped","listening","__extends","props","_super","_this","createClient","client","state","Error","initialize","_a","microphone","onStateChange","setState","mediaStream","attach","appId","undefined","clientOptions","effectiveOpts","onClientStateChange","onSegmentChange","onTranscript","onEntity","onIntent","disableTentative","onTentativeIntent","onTentativeTranscript","onTentativeEntities","segment","isFinal","tentativeTranscript","transcript","tentativeEntities","entity","tentativeIntent","intent","contextId","segmentId","words","text","word","entities","SpeechProvider","Provider","value","children","prevProps","sampleRate","debug","apiUrl","close","_b","console","error","e_1","e_2","_c","Component"],"sources":["C:\\Users\\harsh\\desktop\\Desktop\\test\\expense-tracker\\node_modules\\@speechly\\react-client\\src\\context.tsx"],"sourcesContent":["import React from 'react'\nimport { DecoderOptions, DecoderState, BrowserClient, BrowserMicrophone, AudioSourceState } from '@speechly/browser-client'\n\nimport {\n  Word,\n  Entity,\n  Intent,\n  TentativeSpeechTranscript,\n  TentativeSpeechEntities,\n  TentativeSpeechIntent,\n  SpeechTranscript,\n  SpeechEntity,\n  SpeechIntent,\n  SpeechSegment,\n} from './types'\n\n/**\n * The state of SpeechContext.\n *\n * Functions to initialise audio and recording as well as the state are always present,\n * however the values returned from the API will only be present when they are returned from the API.\n *\n * Individual values (transcripts, entities and intent) are reset back to undefined after current segment is finalised.\n * @public\n */\nexport interface SpeechContextState {\n  /**\n   * Connect to Speechly API.\n   */\n  connect: () => Promise<void>\n\n  /**\n   * Function that initialises Speechly client, including both the API connection and the audio initialisation.\n   *\n   * It is optional and you don't have to call it manually,\n   * it will be called automatically upon the first call to toggleRecording.\n   *\n   * The idea is that it provides a more fine-grained control over how the audio is initialised,\n   * in case you want to give the user more control over your app.\n   */\n  attachMicrophone: () => Promise<void>\n\n  /**\n   * Turns listening on. Automatically initialises the API connection and audio stack.\n   */\n  start: () => Promise<string>\n\n  /**\n   * Turns listening off.\n   */\n  stop: () => Promise<void>\n\n  /**\n   * Current appId in multi-app project.\n   */\n  appId?: string\n\n  /**\n   * @returns true if startContext called and listening will start.\n   * Speechly will normally be listening nearly instantly after startContext.\n   * Check clientState for details about browser client's state.\n   */\n  listening: boolean\n\n  /**\n   * Current state of the context, whether it's idle, recording or failed, etc.\n   * Use this to indicate to the user that recording is in progress or results are being fetched from the API.\n   */\n  clientState: DecoderState\n\n  /**\n   * Current state of the microphone\n   */\n  microphoneState: AudioSourceState\n\n  /**\n   * Last tentative transcript received from the API. Resets after current segment is finalised.\n   */\n  tentativeTranscript?: TentativeSpeechTranscript\n\n  /**\n   * Last tentative entities received from the API. Resets after current segment is finalised.\n   */\n  tentativeEntities?: TentativeSpeechEntities\n\n  /**\n   * Last tentative intent received from the API. Resets after current segment is finalised.\n   */\n  tentativeIntent?: TentativeSpeechIntent\n\n  /**\n   * Last final transcript received from the API. Resets after current segment is finalised.\n   */\n  transcript?: SpeechTranscript\n\n  /**\n   * Last final entity received from the API. Resets after current segment is finalised.\n   */\n  entity?: SpeechEntity\n\n  /**\n   * Last final intent received from the API. Resets after current segment is finalised.\n   */\n  intent?: SpeechIntent\n\n  /**\n   * Last segment received from the API.\n   */\n  segment?: SpeechSegment\n\n  /**\n   * Low-level access to underlying Speechly BrowserClient.\n   */\n  client?: BrowserClient\n\n  /**\n   * Low-level access to underlying Speechly BrowserMicrophone.\n   */\n  microphone?: BrowserMicrophone\n}\n\n/**\n * A React context that holds the state of Speechly SLU API client.\n * @public\n */\nexport const SpeechContext = React.createContext<SpeechContextState>({\n  connect: async () => Promise.resolve(),\n  attachMicrophone: async () => Promise.resolve(),\n  start: async () => Promise.resolve('Unknown contextId'),\n  stop: async () => Promise.resolve(),\n  clientState: DecoderState.Disconnected,\n  microphoneState: AudioSourceState.Stopped,\n  listening: false,\n})\n\n/**\n * Props for SpeechContext provider, which are used to initialise API client.\n * @public\n */\nexport interface SpeechProviderProps extends DecoderOptions {\n  /**\n   * Whether to disable reacting to tentative items. Set this to true if you don't use them.\n   */\n  disableTentative?: boolean\n  children?: React.ReactNode\n}\n\ninterface SpeechProviderState {\n  client?: BrowserClient\n  microphone?: BrowserMicrophone\n  clientState: DecoderState\n  microphoneState: AudioSourceState\n  listening: boolean\n  appId?: string\n  segment?: SpeechSegment\n  tentativeTranscript?: TentativeSpeechTranscript\n  transcript?: SpeechTranscript\n  tentativeEntities?: TentativeSpeechEntities\n  entity?: SpeechEntity\n  tentativeIntent?: TentativeSpeechIntent\n  intent?: SpeechIntent\n}\n\n/**\n * The provider for SpeechContext.\n *\n * Make sure you have only one SpeechProvider in your application,\n * because otherwise the audio will be mixed up and unusable.\n *\n * It is possible to switch the props on the fly, which will make provider stop current client if it's running\n * and start a new one.\n * @public\n */\nexport class SpeechProvider extends React.Component<SpeechProviderProps, SpeechProviderState> {\n  constructor(props: SpeechProviderProps) {\n    super(props)\n    this.state = {\n      client: undefined,\n      microphone: undefined,\n      listening: false,\n      clientState: DecoderState.Disconnected,\n      microphoneState: AudioSourceState.Stopped,\n      appId: props.appId,\n    }\n  }\n\n  // init at mount mount time for to play it nice with SSR\n  readonly componentDidMount = async (): Promise<void> => {\n    this.createClient(this.props)\n  }\n\n  readonly connect = async (): Promise<void> => {\n    const { client } = this.state\n    if (client == null) {\n      throw Error('No Speechly client (are you calling connect in non-browser environment)')\n    }\n    await client.initialize()\n  }\n\n  readonly attachMicrophone = async (): Promise<void> => {\n    const { client } = this.state\n    if (client == null) {\n      throw Error('No Speechly client (are you calling connect in non-browser environment)')\n    }\n\n    const microphone = new BrowserMicrophone()\n    microphone.onStateChange((state: AudioSourceState) => {\n      this.setState({\n        microphoneState: state,\n      })\n    })\n\n    await microphone.initialize()\n\n    if (microphone.mediaStream) {\n      await client.attach(microphone.mediaStream)\n    } else {\n      throw Error('Microphone contains no MediaStream to attach')\n    }\n\n    this.setState({\n      microphone: microphone,\n    })\n  }\n\n  readonly start = async (): Promise<string> => {\n    const { client, appId } = this.state\n    this.setState({ listening: true })\n    if (client == null) {\n      throw Error('No Speechly client (are you calling start in non-browser environment)')\n    }\n    if (appId !== undefined) {\n      return client.start({ appId: appId })\n    }\n    return client.start()\n  }\n\n  readonly stop = async (): Promise<void> => {\n    const { client } = this.state\n    this.setState({ listening: false })\n    if (client == null) {\n      throw Error('No Speechly client (are you calling stop in non-browser environment)')\n    }\n    return client.stop()\n  }\n\n  render(): JSX.Element {\n    return (\n      <SpeechContext.Provider\n        value={{\n          connect: this.connect,\n          attachMicrophone: this.attachMicrophone,\n          start: this.start,\n          stop: this.stop,\n          appId: this.state.appId,\n          listening: this.state.listening,\n          clientState: this.state.clientState,\n          microphoneState: this.state.microphoneState,\n          segment: this.state.segment,\n          tentativeTranscript: this.state.tentativeTranscript,\n          transcript: this.state.transcript,\n          tentativeEntities: this.state.tentativeEntities,\n          entity: this.state.entity,\n          tentativeIntent: this.state.tentativeIntent,\n          intent: this.state.intent,\n          client: this.state.client,\n        }}\n      >\n        {this.props.children}\n      </SpeechContext.Provider>\n    )\n  }\n\n  async componentDidUpdate(prevProps: SpeechProviderProps): Promise<void> {\n    const props = this.props\n\n    // We cannot compare microphone / api client / storage implementations,\n    // so changes in those will be ignored.\n    // A better approach for those would be to use separate contexts.\n    if (\n      props.appId === prevProps.appId &&\n      props.sampleRate === prevProps.sampleRate &&\n      props.debug === prevProps.debug &&\n      props.apiUrl === prevProps.apiUrl\n    ) {\n      return\n    }\n\n    const { client, microphone } = this.state\n\n    try {\n      await client?.close()\n    } catch (e) {\n      console.error('Error closing Speechly client:', e)\n    }\n\n    try {\n      await microphone?.close()\n    } catch (e) {\n      console.error('Error closing microphone:', e)\n    }\n\n    this.createClient(props)\n  }\n\n  async componentWillUnmount(): Promise<void> {\n    try {\n      await this.state.client?.close()\n    } catch {\n      // Nothing to do with the error here, so ignoring it is fine.\n    }\n  }\n\n  private readonly createClient = (clientOptions: SpeechProviderProps): void => {\n    // Postpone connect\n    const effectiveOpts = { ...clientOptions, connect: false }\n    const client = new BrowserClient(effectiveOpts)\n\n    client.onStateChange(this.onClientStateChange)\n    client.onSegmentChange(this.onSegmentChange)\n\n    client.onTranscript(this.onTranscript)\n    client.onEntity(this.onEntity)\n    client.onIntent(this.onIntent)\n\n    if (!(clientOptions.disableTentative ?? false)) {\n      client.onTentativeIntent(this.onTentativeIntent)\n      client.onTentativeTranscript(this.onTentativeTranscript)\n      client.onTentativeEntities(this.onTentativeEntities)\n    }\n\n    // Connect now to pre-warm backend if not explicitely told not to\n    if (clientOptions.connect !== false) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      client.initialize()\n    }\n\n    this.setState({\n      client: client,\n    })\n  }\n\n  private readonly onClientStateChange = (clientState: DecoderState): void => {\n    if (clientState <= DecoderState.Disconnected) {\n      this.setState({ listening: false })\n    }\n    this.setState({ clientState })\n  }\n\n  private readonly onSegmentChange = (segment: SpeechSegment): void => {\n    if (!segment.isFinal) {\n      this.setState({ segment: segment })\n      return\n    }\n\n    // Reset individual values when a segment is finalised.\n    this.setState({\n      segment: segment,\n      tentativeTranscript: undefined,\n      transcript: undefined,\n      tentativeEntities: undefined,\n      entity: undefined,\n      tentativeIntent: undefined,\n      intent: undefined,\n    })\n  }\n\n  private readonly onTentativeTranscript = (\n    contextId: string,\n    segmentId: number,\n    words: Word[],\n    text: string,\n  ): void => {\n    this.setState({\n      tentativeTranscript: {\n        contextId,\n        segmentId,\n        text,\n        words,\n      },\n    })\n  }\n\n  private readonly onTranscript = (contextId: string, segmentId: number, word: Word): void => {\n    this.setState({\n      transcript: {\n        contextId,\n        segmentId,\n        word,\n      },\n    })\n  }\n\n  private readonly onTentativeEntities = (contextId: string, segmentId: number, entities: Entity[]): void => {\n    this.setState({\n      tentativeEntities: {\n        contextId,\n        segmentId,\n        entities,\n      },\n    })\n  }\n\n  private readonly onEntity = (contextId: string, segmentId: number, entity: Entity): void => {\n    this.setState({\n      entity: {\n        contextId,\n        segmentId,\n        entity,\n      },\n    })\n  }\n\n  private readonly onTentativeIntent = (contextId: string, segmentId: number, intent: Intent): void => {\n    this.setState({\n      tentativeIntent: {\n        contextId,\n        segmentId,\n        intent,\n      },\n    })\n  }\n\n  private readonly onIntent = (contextId: string, segmentId: number, intent: Intent): void => {\n    this.setState({\n      intent: {\n        contextId,\n        segmentId,\n        intent,\n      },\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}