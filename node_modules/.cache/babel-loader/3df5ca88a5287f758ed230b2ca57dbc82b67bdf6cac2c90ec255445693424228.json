{"ast":null,"code":"\"use strict\";\n\nvar __makeTemplateObject = this && this.__makeTemplateObject || function (cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n  return cooked;\n};\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PushToTalkButton = void 0;\nvar react_1 = __importStar(require(\"react\"));\nvar react_client_1 = require(\"@speechly/react-client\");\nvar pubsub_js_1 = __importDefault(require(\"pubsub-js\"));\nvar types_1 = require(\"../types\");\nvar __1 = require(\"..\");\nvar styled_components_1 = __importDefault(require(\"styled-components\"));\nvar PushToTalkButton = function (_a) {\n  var _b = _a.powerOn,\n    powerOn = _b === void 0 ? false : _b,\n    _c = _a.hide,\n    hide = _c === void 0 ? false : _c,\n    captureKey = _a.captureKey,\n    size = _a.size,\n    _d = _a.gradientStops,\n    gradientStops = _d === void 0 ? ['#15e8b5', '#4fa1f9'] : _d,\n    _e = _a.intro,\n    intro = _e === void 0 ? 'Hold to talk' : _e,\n    _f = _a.hint,\n    hint = _f === void 0 ? 'Hold to talk' : _f,\n    _g = _a.fontSize,\n    fontSize = _g === void 0 ? '100%' : _g,\n    showTime = _a.showTime,\n    _h = _a.textColor,\n    textColor = _h === void 0 ? '#ffffff' : _h,\n    backgroundColor = _a.backgroundColor,\n    placement = _a.placement,\n    voffset = _a.voffset,\n    _j = _a.tapToTalkTime,\n    tapToTalkTime = _j === void 0 ? 8000 : _j,\n    _k = _a.silenceToHangupTime,\n    silenceToHangupTime = _k === void 0 ? 1000 : _k;\n  var _l = (0, react_client_1.useSpeechContext)(),\n    client = _l.client,\n    clientState = _l.clientState,\n    microphoneState = _l.microphoneState,\n    attachMicrophone = _l.attachMicrophone,\n    start = _l.start,\n    stop = _l.stop,\n    segment = _l.segment;\n  var _m = (0, react_1.useState)(false),\n    loaded = _m[0],\n    setLoaded = _m[1];\n  var _o = (0, react_1.useState)(react_client_1.DecoderState.Disconnected),\n    icon = _o[0],\n    setIcon = _o[1];\n  var _p = (0, react_1.useState)(intro),\n    hintText = _p[0],\n    setHintText = _p[1];\n  var _q = (0, react_1.useState)(true),\n    showHint = _q[0],\n    setShowHint = _q[1];\n  var _r = (0, react_1.useState)(powerOn === true),\n    usePermissionPriming = _r[0],\n    setUsePermissionPriming = _r[1];\n  var buttonStateRef = (0, react_1.useRef)({\n    tapListenActive: false,\n    wasListening: false,\n    holdListenActive: false,\n    tapListenTimeout: null,\n    tangentPressPromise: null\n  });\n  var buttonRef = (0, react_1.useRef)();\n  var TAP_TRESHOLD_MS = 600;\n  var PERMISSION_PRE_GRANTED_TRESHOLD_MS = 1500;\n  // make stateRef always have the current count\n  // your \"fixed\" callbacks can refer to this object whenever\n  // they need the current value.  Note: the callbacks will not\n  // be reactive - they will not re-run the instant state changes,\n  // but they *will* see the current value whenever they do run\n  var clientStateRef = (0, react_1.useRef)(clientState);\n  var microphoneStateRef = (0, react_1.useRef)(microphoneState);\n  // Dynamic import of HTML custom element to play nice with Next.js SSR\n  (0, react_1.useEffect)(function () {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    (function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var import1, import2;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              import1 = Promise.resolve().then(function () {\n                return __importStar(require('@speechly/browser-ui/core/holdable-button'));\n              });\n              import2 = Promise.resolve().then(function () {\n                return __importStar(require('@speechly/browser-ui/core/call-out'));\n              });\n              return [4 /*yield*/, Promise.all([import1, import2])];\n            case 1:\n              _a.sent();\n              setLoaded(true);\n              return [2 /*return*/];\n          }\n        });\n      });\n    })();\n  }, []);\n  // Use browser API only after mount to play nice with Next.js SSR\n  (0, react_1.useEffect)(function () {\n    if (powerOn === 'auto') {\n      setUsePermissionPriming(localStorage.getItem(\"SpeechlyFirstConnect\" /* SpeechlyFirstConnect */) === null);\n    }\n  }, [powerOn]);\n  (0, react_1.useEffect)(function () {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) {\n      var button = buttonRef.current;\n      button.onholdstart = tangentPressAction;\n      button.onholdend = tangentReleaseAction;\n    }\n  });\n  (0, react_1.useEffect)(function () {\n    clientStateRef.current = clientState;\n    microphoneStateRef.current = microphoneState;\n    // Change button appearance according to Speechly states\n    switch (microphoneState) {\n      case react_client_1.AudioSourceState.NoAudioConsent:\n      case react_client_1.AudioSourceState.NoBrowserSupport:\n        setIcon(microphoneState);\n        break;\n      default:\n        setIcon(clientState);\n        break;\n    }\n    if (clientState >= react_client_1.DecoderState.Connected && microphoneState === react_client_1.AudioSourceState.Started) {\n      setUsePermissionPriming(false);\n      // Set connect made\n      if (localStorage.getItem(\"SpeechlyFirstConnect\" /* SpeechlyFirstConnect */) === null) {\n        localStorage.setItem(\"SpeechlyFirstConnect\" /* SpeechlyFirstConnect */, String(Date.now()));\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clientState, microphoneState]);\n  var tangentPressAction = function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!client) {\n          throw Error('No Speechly client (are you using Speechly in non-browser environment?)');\n        }\n        buttonStateRef.current.tangentPressPromise = function () {\n          return __awaiter(void 0, void 0, void 0, function () {\n            var initStartTime, err_1, err_2;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  pubsub_js_1.default.publish(types_1.SpeechlyUiEvents.TangentPress, {\n                    state: clientStateRef.current\n                  });\n                  window.postMessage({\n                    type: 'holdstart',\n                    state: clientStateRef.current,\n                    audioSourceState: microphoneStateRef.current\n                  }, '*');\n                  setShowHint(false);\n                  if (!usePermissionPriming) return [3 /*break*/, 1];\n                  window.postMessage({\n                    type: \"speechlypoweron\" /* speechlypoweron */\n                  }, '*');\n                  return [3 /*break*/, 11];\n                case 1:\n                  if (buttonStateRef.current.tapListenTimeout) {\n                    window.clearTimeout(buttonStateRef.current.tapListenTimeout);\n                    buttonStateRef.current.tapListenTimeout = null;\n                  }\n                  if (!(clientStateRef.current >= react_client_1.DecoderState.Connected && microphoneStateRef.current === react_client_1.AudioSourceState.Started)) return [3 /*break*/, 2];\n                  buttonStateRef.current.holdListenActive = true;\n                  return [3 /*break*/, 7];\n                case 2:\n                  initStartTime = Date.now();\n                  _a.label = 3;\n                case 3:\n                  _a.trys.push([3, 5,, 6]);\n                  return [4 /*yield*/, attachMicrophone()];\n                case 4:\n                  _a.sent();\n                  return [3 /*break*/, 6];\n                case 5:\n                  err_1 = _a.sent();\n                  console.error('Error initializing Speechly', err_1);\n                  return [3 /*break*/, 6];\n                case 6:\n                  // Long init time suggests permission dialog --> prevent listening start\n                  buttonStateRef.current.holdListenActive = Date.now() - initStartTime < PERMISSION_PRE_GRANTED_TRESHOLD_MS;\n                  _a.label = 7;\n                case 7:\n                  if (!buttonStateRef.current.holdListenActive) return [3 /*break*/, 11];\n                  buttonStateRef.current.wasListening = client.isActive();\n                  if (!!client.isActive()) return [3 /*break*/, 11];\n                  _a.label = 8;\n                case 8:\n                  _a.trys.push([8, 10,, 11]);\n                  return [4 /*yield*/, start()];\n                case 9:\n                  _a.sent();\n                  return [3 /*break*/, 11];\n                case 10:\n                  err_2 = _a.sent();\n                  console.error('Error while starting to record', err_2);\n                  return [3 /*break*/, 11];\n                case 11:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        }();\n        return [2 /*return*/];\n      });\n    });\n  };\n  var tangentReleaseAction = function (event) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Ensure async tangentPress and Release are run in appropriate order\n            return [4 /*yield*/, buttonStateRef.current.tangentPressPromise];\n          case 1:\n            // Ensure async tangentPress and Release are run in appropriate order\n            _a.sent();\n            pubsub_js_1.default.publish(types_1.SpeechlyUiEvents.TangentRelease, {\n              state: clientStateRef.current,\n              timeMs: event.timeMs\n            });\n            window.postMessage({\n              type: 'holdend'\n            }, '*');\n            if (buttonStateRef.current.holdListenActive) {\n              buttonStateRef.current.holdListenActive = false;\n              if (event.timeMs < TAP_TRESHOLD_MS) {\n                if (tapToTalkTime === 0) {\n                  stopListening();\n                  setHintText(hint);\n                  setShowHint(true);\n                } else {\n                  // Tap: toggle listening on/off\n                  if (buttonStateRef.current.wasListening) {\n                    stopListening();\n                  } else {\n                    // schedule \"silence based stop\"\n                    setStopContextTimeout(tapToTalkTime);\n                  }\n                }\n              } else {\n                stopListening();\n              }\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  var setStopContextTimeout = function (timeoutMs) {\n    buttonStateRef.current.tapListenActive = true;\n    if (buttonStateRef.current.tapListenTimeout) {\n      window.clearTimeout(buttonStateRef.current.tapListenTimeout);\n    }\n    buttonStateRef.current.tapListenTimeout = window.setTimeout(function () {\n      buttonStateRef.current.tapListenTimeout = null;\n      stopListening();\n    }, timeoutMs);\n  };\n  var stopListening = function () {\n    buttonStateRef.current.tapListenActive = false;\n    if (client === null || client === void 0 ? void 0 : client.isActive()) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        stop();\n      } catch (err) {\n        console.error('Error while stopping recording', err);\n      }\n    }\n  };\n  /**\n   * Extend listening time if segment updates received\n   */\n  (0, react_1.useEffect)(function () {\n    if (segment) {\n      if (buttonStateRef.current.tapListenTimeout) {\n        setStopContextTimeout(silenceToHangupTime);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [segment]);\n  if (!loaded) return null;\n  return react_1.default.createElement(MicButtonDiv, {\n    textColor: textColor,\n    fontSize: fontSize\n  }, placement === 'bottom' && react_1.default.createElement(__1.PushToTalkButtonContainer, {\n    size: size,\n    voffset: voffset\n  }, react_1.default.createElement(\"holdable-button\", {\n    ref: buttonRef,\n    poweron: powerOn,\n    capturekey: captureKey,\n    icon: icon,\n    size: size,\n    gradientstop1: gradientStops[0],\n    gradientstop2: gradientStops[1],\n    hide: hide ? 'true' : 'false'\n  }), react_1.default.createElement(\"call-out\", {\n    show: showHint && hintText !== '',\n    backgroundcolor: backgroundColor,\n    showtime: showTime\n  }, hintText)), placement !== 'bottom' && react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(\"holdable-button\", {\n    ref: buttonRef,\n    poweron: powerOn,\n    capturekey: captureKey,\n    icon: icon,\n    size: size,\n    gradientstop1: gradientStops[0],\n    gradientstop2: gradientStops[1],\n    hide: hide ? 'true' : 'false'\n  }), react_1.default.createElement(\"call-out\", {\n    show: showHint && hintText !== '',\n    backgroundcolor: backgroundColor,\n    showtime: showTime\n  }, hintText)));\n};\nexports.PushToTalkButton = PushToTalkButton;\nvar MicButtonDiv = styled_components_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  font-family: 'Saira Condensed', sans-serif;\\n  color: \", \";\\n  font-size: \", \";\\n  line-height: 120%;\\n  text-transform: uppercase;\\n\"], [\"\\n  font-family: 'Saira Condensed', sans-serif;\\n  color: \", \";\\n  font-size: \", \";\\n  line-height: 120%;\\n  text-transform: uppercase;\\n\"])), function (props) {\n  return props.textColor;\n}, function (props) {\n  return props.fontSize;\n});\nvar templateObject_1;","map":{"version":3,"mappings":"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","names":["PushToTalkButton","_a","_b","powerOn","_c","hide","captureKey","size","_d","gradientStops","_e","intro","_f","hint","_g","fontSize","showTime","_h","textColor","backgroundColor","placement","voffset","_j","tapToTalkTime","_k","silenceToHangupTime","client","clientState","microphoneState","attachMicrophone","start","stop","segment","loaded","setLoaded","react_client_1","Disconnected","icon","setIcon","hintText","setHintText","showHint","setShowHint","usePermissionPriming","setUsePermissionPriming","buttonStateRef","tapListenActive","wasListening","holdListenActive","tapListenTimeout","tangentPressPromise","buttonRef","TAP_TRESHOLD_MS","PERMISSION_PRE_GRANTED_TRESHOLD_MS","clientStateRef","microphoneStateRef","import1","import2","Promise","all","localStorage","getItem","current","button","onholdstart","tangentPressAction","onholdend","tangentReleaseAction","NoAudioConsent","NoBrowserSupport","Connected","Started","setItem","String","Date","now","Error","pubsub_js_1","publish","types_1","TangentPress","state","window","postMessage","type","audioSourceState","clearTimeout","initStartTime","console","error","err_1","isActive","err_2","event","TangentRelease","timeMs","stopListening","setStopContextTimeout","timeoutMs","setTimeout","err","react_1","MicButtonDiv","__1","ref","poweron","capturekey","gradientstop1","gradientstop2","show","backgroundcolor","showtime","exports","styled_components_1","div","props"],"sources":["C:\\Users\\harsh\\desktop\\Desktop\\test\\expense-tracker\\node_modules\\@speechly\\react-ui\\src\\components\\PushToTalkButton.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { AudioSourceState, DecoderState, useSpeechContext } from '@speechly/react-client'\nimport { LocalStorageKeys, MessageType } from '@speechly/browser-ui'\nimport PubSub from 'pubsub-js'\nimport { SpeechlyUiEvents } from '../types'\nimport { PushToTalkButtonContainer } from '..'\nimport styled from 'styled-components'\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace JSX {\n    interface IntrinsicElements {\n      'holdable-button': any\n    }\n    interface IntrinsicElements {\n      'call-out': any\n    }\n  }\n}\n\n/**\n * Properties for PushToTalkButton component.\n *\n * @public\n */\nexport type PushToTalkButtonProps = {\n  /**\n   * Optional \"bottom\" string turns on internal placement without any CSS positioning.\n   */\n  placement?: string\n\n  /**\n   * Keyboard key to use for controlling the button.\n   * Passing e.g. ` ` (a spacebar) will mean that holding down the spacebar key will key the button pressed.\n   */\n  captureKey?: string\n\n  /**\n   * The size of the button, as CSS (e.g. `5rem`).\n   */\n  size?: string\n\n  /**\n   * Colours of the gradient around the button.\n   * Valid input is an array of two hex colour codes, e.g. `['#fff', '#000']`.\n   */\n  gradientStops?: string[]\n\n  /**\n   * Optional boolean. Default: false\n   */\n  hide?: boolean\n\n  /**\n   * Optional string containing a short usage introduction. Displayed when the component is first displayed. Default: \"Push to talk\". Set to \"\" to disable.\n   */\n  intro?: string\n\n  /**\n   * Optional string containing a short usage hint. Displayed on a short tap. Default: \"Push to talk\". Set to \"\" to disable.\n   */\n  hint?: string\n\n  /**\n   * Optional CSS string for hint text. Default: \"1.2rem\"\n   */\n  fontSize?: string\n\n  /**\n   * Optional number in ms. Visibility duration for intro and hint callouts. Default: \"5000\" (ms)\n   */\n  showTime?: number\n\n  /**\n   * Optional string (CSS color) for hint text. Default: \"#ffffff\"\n   */\n  textColor?: string\n\n  /**\n   * Optional string (CSS color) for hint text background. Default: \"#202020\"\n   */\n  backgroundColor?: string\n\n  /**\n   * Optional boolean. Shows poweron state. If false, recording can immediately start but will first press will cause a system permission prompt. Default: false\n   */\n  powerOn?: boolean | 'auto'\n\n  /**\n   * Optional CSS string. Vertical distance from viewport edge. Only effective when using placement.\n   */\n  voffset?: string\n\n  /**\n   * Optional time in milliseconds to listen after tap. Set to 0 to disable tap-to-talk. Default: \"8000\" (ms)\n   */\n  tapToTalkTime?: number\n\n  /**\n   * Optional milliseconds of silence to listen before hangup. Only used in tap-to-talk mode. Default: \"1000\" (ms)\n   */\n  silenceToHangupTime?: number\n\n}\n\n/**\n * A React component that renders a push-to-talk microphone button.\n *\n * Make sure to place this component inside your `SpeechProvider` component imported from `@speechly/react-client`.\n *\n * @public\n */\n\ntype IButtonState = {\n  tapListenActive: boolean\n  wasListening: boolean\n  holdListenActive: boolean\n  tapListenTimeout: number | null\n  tangentPressPromise: Promise<void> | null\n}\n\nexport const PushToTalkButton: React.FC<PushToTalkButtonProps> = ({\n  powerOn = false,\n  hide = false,\n  captureKey,\n  size,\n  gradientStops = ['#15e8b5', '#4fa1f9'],\n  intro = 'Hold to talk',\n  hint = 'Hold to talk',\n  fontSize = '100%',\n  showTime,\n  textColor = '#ffffff',\n  backgroundColor,\n  placement,\n  voffset,\n  tapToTalkTime = 8000,\n  silenceToHangupTime = 1000,\n}) => {\n  const { client, clientState, microphoneState, attachMicrophone, start, stop, segment } = useSpeechContext()\n  const [loaded, setLoaded] = useState(false)\n  const [icon, setIcon] = useState<string>(DecoderState.Disconnected as unknown as string)\n  const [hintText, setHintText] = useState<string>(intro)\n  const [showHint, setShowHint] = useState(true)\n  const [usePermissionPriming, setUsePermissionPriming] = useState(powerOn === true)\n  const buttonStateRef = useRef<IButtonState>({\n    tapListenActive: false,\n    wasListening: false,\n    holdListenActive: false,\n    tapListenTimeout: null,\n    tangentPressPromise: null,\n  })\n  const buttonRef = useRef<any>()\n\n  const TAP_TRESHOLD_MS = 600\n  const PERMISSION_PRE_GRANTED_TRESHOLD_MS = 1500\n\n  // make stateRef always have the current count\n  // your \"fixed\" callbacks can refer to this object whenever\n  // they need the current value.  Note: the callbacks will not\n  // be reactive - they will not re-run the instant state changes,\n  // but they *will* see the current value whenever they do run\n  const clientStateRef = useRef<DecoderState>(clientState)\n  const microphoneStateRef = useRef<AudioSourceState>(microphoneState)\n\n  // Dynamic import of HTML custom element to play nice with Next.js SSR\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    (async () => {\n      const import1 = import('@speechly/browser-ui/core/holdable-button')\n      const import2 = import('@speechly/browser-ui/core/call-out')\n      await Promise.all([import1, import2])\n\n      setLoaded(true)\n    })()\n  }, [])\n\n  // Use browser API only after mount to play nice with Next.js SSR\n  useEffect(() => {\n    if (powerOn === 'auto') {\n      setUsePermissionPriming(localStorage.getItem(LocalStorageKeys.SpeechlyFirstConnect) === null)\n    }\n  }, [powerOn])\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (buttonRef?.current) {\n      const button = buttonRef.current\n      button.onholdstart = tangentPressAction\n      button.onholdend = tangentReleaseAction\n    }\n  })\n\n  useEffect(() => {\n    clientStateRef.current = clientState\n    microphoneStateRef.current = microphoneState\n\n    // Change button appearance according to Speechly states\n    switch (microphoneState) {\n      case AudioSourceState.NoAudioConsent:\n      case AudioSourceState.NoBrowserSupport:\n        setIcon(microphoneState)\n        break\n      default:\n        setIcon(clientState as unknown as string)\n        break\n    }\n\n    if (clientState >= DecoderState.Connected && microphoneState === AudioSourceState.Started) {\n      setUsePermissionPriming(false)\n      // Set connect made\n      if (localStorage.getItem(LocalStorageKeys.SpeechlyFirstConnect) === null) {\n        localStorage.setItem(LocalStorageKeys.SpeechlyFirstConnect, String(Date.now()))\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clientState, microphoneState])\n\n  const tangentPressAction = async (): Promise<void> => {\n    if (!client) {\n      throw Error('No Speechly client (are you using Speechly in non-browser environment?)')\n    }\n\n    buttonStateRef.current.tangentPressPromise = (async() => {\n      PubSub.publish(SpeechlyUiEvents.TangentPress, { state: clientStateRef.current })\n      window.postMessage({ type: 'holdstart', state: clientStateRef.current, audioSourceState: microphoneStateRef.current }, '*')\n      setShowHint(false)\n\n      if (usePermissionPriming) {\n        window.postMessage({\n          type: MessageType.speechlypoweron,\n        }, '*')\n      } else {\n        if (buttonStateRef.current.tapListenTimeout) {\n          window.clearTimeout(buttonStateRef.current.tapListenTimeout)\n          buttonStateRef.current.tapListenTimeout = null\n        }\n\n        if (clientStateRef.current >= DecoderState.Connected && microphoneStateRef.current === AudioSourceState.Started) {\n          buttonStateRef.current.holdListenActive = true\n        } else {\n          // Speechly & Mic initialise needs to be in a function triggered by event handler\n          const initStartTime = Date.now()\n          try {\n            await attachMicrophone()\n          } catch (err) {\n            console.error('Error initializing Speechly', err)\n          }\n          // Long init time suggests permission dialog --> prevent listening start\n          buttonStateRef.current.holdListenActive = Date.now() - initStartTime < PERMISSION_PRE_GRANTED_TRESHOLD_MS\n        }\n\n        // Start listening\n        if (buttonStateRef.current.holdListenActive) {\n          buttonStateRef.current.wasListening = client.isActive()\n          if (!client.isActive()) {\n            try {\n              await start()\n            } catch (err) {\n              console.error('Error while starting to record', err)\n            }\n          }\n        }\n      }\n    })()\n  }\n\n  const tangentReleaseAction = async (event: any): Promise<void> => {\n    // Ensure async tangentPress and Release are run in appropriate order\n    await buttonStateRef.current.tangentPressPromise\n\n    PubSub.publish(SpeechlyUiEvents.TangentRelease, { state: clientStateRef.current, timeMs: event.timeMs })\n    window.postMessage({ type: 'holdend' }, '*')\n\n    if (buttonStateRef.current.holdListenActive) {\n      buttonStateRef.current.holdListenActive = false\n\n      if (event.timeMs < TAP_TRESHOLD_MS) {\n        if (tapToTalkTime === 0) {\n          stopListening()\n          setHintText(hint)\n          setShowHint(true)\n        } else {\n          // Tap: toggle listening on/off\n          if (buttonStateRef.current.wasListening) {\n            stopListening()\n          } else {\n            // schedule \"silence based stop\"\n            setStopContextTimeout(tapToTalkTime)\n          }\n        }\n      } else {\n        stopListening()\n      }\n    }\n  }\n\n  const setStopContextTimeout = (timeoutMs: number): void => {\n    buttonStateRef.current.tapListenActive = true\n    if (buttonStateRef.current.tapListenTimeout) {\n      window.clearTimeout(buttonStateRef.current.tapListenTimeout)\n    }\n    buttonStateRef.current.tapListenTimeout = window.setTimeout(() => {\n      buttonStateRef.current.tapListenTimeout = null\n      stopListening()\n    }, timeoutMs)\n  }\n\n  const stopListening = (): void => {\n    buttonStateRef.current.tapListenActive = false\n    if (client?.isActive()) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        stop()\n      } catch (err) {\n        console.error('Error while stopping recording', err)\n      }\n    }\n  }\n\n  /**\n   * Extend listening time if segment updates received\n   */\n  useEffect(() => {\n    if (segment) {\n      if (buttonStateRef.current.tapListenTimeout) {\n        setStopContextTimeout(silenceToHangupTime)\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [segment])\n\n  if (!loaded) return null\n\n  return (\n    <MicButtonDiv textColor={textColor} fontSize={fontSize}>\n      { (placement === 'bottom') && (\n        <PushToTalkButtonContainer size={size} voffset={voffset}>\n          <holdable-button ref={buttonRef} poweron={powerOn} capturekey={captureKey} icon={icon} size={size} gradientstop1={gradientStops[0]} gradientstop2={gradientStops[1]} hide={hide ? 'true' : 'false'}></holdable-button>\n          <call-out show={showHint && hintText !== ''} backgroundcolor={backgroundColor} showtime={showTime}>{hintText}</call-out>\n        </PushToTalkButtonContainer>\n      )}\n      { (placement !== 'bottom') && (\n        <>\n          <holdable-button ref={buttonRef} poweron={powerOn} capturekey={captureKey} icon={icon} size={size} gradientstop1={gradientStops[0]} gradientstop2={gradientStops[1]} hide={hide ? 'true' : 'false'}></holdable-button>\n          <call-out show={showHint && hintText !== ''} backgroundcolor={backgroundColor} showtime={showTime}>{hintText}</call-out>\n        </>\n      )}\n    </MicButtonDiv>\n  )\n}\n\nconst MicButtonDiv = styled.div<{textColor: string, fontSize: string}>`\n  font-family: 'Saira Condensed', sans-serif;\n  color: ${(props) => props.textColor};\n  font-size: ${(props) => props.fontSize};\n  line-height: 120%;\n  text-transform: uppercase;\n`\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}